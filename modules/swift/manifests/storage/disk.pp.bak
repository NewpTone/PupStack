# follow the instructions for creating a loopback device
# for storage from: http://swift.openstack.org/development_saio.html
#
#
# creates a managed partition for useage
#   - creates a disk table, each disk table contains one partition (e.g. sdb table contains sdb1)
#   - formats the partirion to be an xfs device and mounts it as a block device at /srv/node/$name
#   - sets up each mount point as a swift endpoint
define swift::storage::disk(
  $base_dir     = '/dev',
  $mnt_base_dir = '/srv/node',
) {

  if(!defined(File[$base_dir])) {
    file { $base_dir:
      ensure => directory,
    }
  }

  if(!defined(File[$mnt_base_dir])) {
    file { $mnt_base_dir:
      owner  => 'swift',
      group  => 'swift',
      ensure => directory,
    }
  }
  
  exec { "create_partition_table-${name}":
    command     => "parted ${base_dir}}/${name} mklabel gpt ",
    path        => ['/usr/bin/', '/bin'],
    unless      => ["test -b ${base_dir}/${name}","parted ${base_dir}/${name} print|tail -2|grep 'Number'"],
    require     => File[$base_dir],
    subscribe   => File['/etc/swift/disk.ini'],
  }

  exec {"create_partition-${name}":
	command	   => "parted -s /dev/${name} mkpart parimary 0% 100% ", 
	path	   => ['/usr/bin'],
	onlyif	   => ["test `cat /etc/swift/disk.ini |grep '/dev'| tail -1 |  awk -F' ' '{print $3}'` -eq 1",\
			"test -e `cat /etc/swift/disk.ini |grep '/dev'| tail -1 |  awk -F' ' '{print $1}'`",\
			"test `cat /etc/swift/disk.ini |grep '/dev'| tail -1 |  awk -F' ' '{print $1}'` != '/dev/sda'"],
	require    => Exec{"create_partition_table-${name}"},
  }


  swift::storage::xfs { $name:
    device       => "${base_dir}/${name}",
    mnt_base_dir => $mnt_base_dir,
    byte_size    => $byte_size,
    subscribe    => Exec["create_partition-${name}"],
    loopback     => false,
  }

}
